{
	"name": "lean4",
	"displayName": "lean4",
	"description": "Lean 4 language support for VS Code",
	"version": "0.0.69",
	"publisher": "leanprover",
	"engines": {
		"vscode": "^1.57.0"
	},
	"categories": [
		"Programming Languages"
	],
	"keywords": [
		"multi-root ready"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/leanprover-community/vscode-lean4.git"
	},
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "Lean 4",
			"properties": {
				"lean4.toolchainPath": {
					"type": "string",
					"default": "",
					"markdownDescription": "Path to your Lean toolchain. Leave this blank to get the default location from your PATH environment or from the default elan install location.",
					"scope": "machine-overridable"
				},
				"lean4.input.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable Lean input mode."
				},
				"lean4.input.customTranslations": {
					"type": "object",
					"items": {
						"type": "string",
						"description": "Unicode character to translate to"
					},
					"default": {},
					"markdownDescription": "Add additional input Unicode translations. Example: `{\"foo\": \"☺\"}` will correct `\\foo` to `☺`."
				},
				"lean4.input.languages": {
					"type": "array",
					"default": [
						"lean4",
						"lean"
					],
					"markdownDescription": "Enable Lean Unicode input in other file types.",
					"items": {
						"type": "string",
						"description": "the name of a language, e.g. 'lean', 'lean4', 'markdown'"
					}
				},
				"lean4.input.leader": {
					"type": "string",
					"default": "\\",
					"markdownDescription": "Leader key to trigger input mode."
				},
				"lean4.input.eagerReplacementEnabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable eager replacement of abbreviations that uniquely identify a symbol."
				},
				"lean4.serverEnv": {
					"type": "object",
					"default": {},
					"description": "Environment variables to add to the Lean 4 server environment",
					"additionalProperties": {
						"type": "string",
						"description": "environment variable to add"
					},
					"scope": "machine-overridable"
				},
				"lean4.serverEnvPaths": {
					"type": "array",
					"default": [],
					"description": "Paths to add to the Lean 4 server environment PATH variable.",
					"items": {
						"type": "string",
						"description": "a path to add to the environment"
					},
					"scope": "machine-overridable"
				},
				"lean4.enableLake": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable Lake server when possible."
				},
				"lean4.serverArgs": {
					"type": "array",
					"default": [],
					"description": "Arguments to pass to the Lean 4 server.",
					"items": {
						"type": "string",
						"description": "an argument to pass to the server"
					}
				},
				"lean4.serverLogging.enabled": {
					"type": "boolean",
					"default": false,
					"description": "Enable Lean 4 server logging."
				},
				"lean4.serverLogging.path": {
					"type": "string",
					"default": ".",
					"description": "Path to the directory where Lean 4 server log files are stored.",
					"scope": "machine-overridable"
				},
				"lean4.infoViewAllErrorsOnLine": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Infoview: show all errors on the current line, instead of just the ones on the right of the cursor."
				},
				"lean4.infoViewAutoOpen": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Infoview: open infoview when Lean extension is activated for the first time."
				},
				"lean4.infoViewAutoOpenShowGoal": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Infoview: auto open shows goal and messages for the current line (instead of all messages for the whole file)"
				},
				"lean4.infoViewStyle": {
					"type": "string",
					"default": "",
					"markdownDescription": "Add an additional CSS snippet to the infoview."
				},
				"lean4.infoViewTacticStateFilters": {
					"type": "array",
					"default": [
						{
							"regex": "^_",
							"match": false,
							"flags": ""
						},
						{
							"name": "goals only",
							"regex": "^(⊢|\\d+ goals|case|$)",
							"match": true,
							"flags": ""
						}
					],
					"markdownDescription": "An array of objects containing regular expression strings that can be used to filter (positively or negatively) the tactic state in the infoview. Set to an empty array `[]` to hide the filter select dropdown.\n \n Each object must contain the following keys: 'regex': string, 'match': boolean, 'flags': string.\n 'regex' is a properly-escaped regex string,\n 'match' = true (false) means blocks in the tactic state matching 'regex' will be included (excluded) in the infoview, \n 'flags' are additional flags passed to the JavaScript `RegExp` constructor.\n The 'name' key is optional and may contain a string that is displayed in the dropdown instead of the full regex details.",
					"items": {
						"type": "object",
						"description": "an object with required properties 'regex': string, 'match': boolean, and 'flags': string, and optional property 'name': string",
						"properties": {
							"name": {
								"type": "string",
								"description": "name displayed in the dropdown"
							},
							"regex": {
								"type": "string",
								"description": "a properly-escaped regex string, e.g. '^_' matches any string beginning with an underscore"
							},
							"match": {
								"type": "boolean",
								"description": "whether tactic state lines matching the value of 'regex' should be included (true) or excluded (false)"
							},
							"flags": {
								"type": "string",
								"description": "additional flags passed to the RegExp constructor, e.g. 'i' for ignore case"
							}
						},
						"required": [
							"regex",
							"match",
							"flags"
						]
					}
				},
				"lean4.infoViewFilterIndex": {
					"type": "number",
					"default": -1,
					"markdownDescription": "Index of the filter applied to the tactic state (in the array infoViewTacticStateFilters). An index of -1 means no filter is applied."
				},
				"lean4.elaborationDelay": {
					"type": "number",
					"default": 200,
					"description": "Time (in milliseconds) which must pass since latest edit until elaboration begins. Lower values may make editing feel faster at the cost of higher CPU usage."
				}
			}
		},
		"commands": [
			{
				"command": "lean4.restartServer",
				"category": "Lean 4",
				"title": "Restart Server",
				"description": "Restart the language server."
			},
			{
				"command": "lean4.refreshFileDependencies",
				"category": "Lean 4",
				"title": "Refresh File Dependencies",
				"description": "Restarts the file worker for the file that is currently focused to refresh the dependencies."
			},
			{
				"command": "lean4.input.convert",
				"category": "Lean 4",
				"title": "Input: Convert Current Abbreviation",
				"description": "Converts the current abbreviation (e.g. \\lam)."
			},
			{
				"command": "lean4.displayGoal",
				"category": "Lean 4",
				"title": "Infoview: Display Goal",
				"description": "Display the goal and any messages at the current position in the infoview.",
				"icon": {
					"dark": "./media/display-goal-dark.svg",
					"light": "./media/display-goal-light.svg"
				}
			},
			{
				"command": "lean4.displayList",
				"category": "Lean 4",
				"title": "Infoview: Toggle \"All Messages\"",
				"description": "Toggles the \"All Messages\" widget in the infoview."
			},
			{
				"command": "lean4.infoView.copyToComment",
				"category": "Lean 4",
				"title": "Infoview: Copy Contents to Comment",
				"description": "Copy the contents of the currently active tactic state widget to a new comment on the previous line.",
				"icon": {
					"dark": "./media/copy-to-comment-dark.svg",
					"light": "./media/copy-to-comment-light.svg"
				}
			},
			{
				"command": "lean4.infoView.toggleStickyPosition",
				"category": "Lean 4",
				"title": "Infoview: Toggle Pin",
				"description": "Create or remove a tactic state widget pinned to show the goal at the current position.",
				"icon": {
					"dark": "./media/toggle-sticky-position-dark.svg",
					"light": "./media/toggle-sticky-position-light.svg"
				}
			},
			{
				"command": "lean4.infoView.toggleUpdating",
				"category": "Lean 4",
				"title": "Infoview: Toggle Updating",
				"description": "Pause / Continue live updating of the main tactic state widget."
			},
			{
				"command": "lean4.selectToolchain",
				"category": "Lean 4",
				"title": "Select Lean Toolchain",
				"description": "Select version of the Lean toolchain to use for this project."
			},
			{
				"command": "lean4.docView.showAllAbbreviations",
				"category": "Lean 4",
				"title": "Show all abbreviations",
				"description": "Show help page containing all abbreviations and the Unicode characters they map to."
			},
			{
				"command": "lean4.docView.open",
				"category": "Lean 4",
				"title": "Open Documentation View",
				"description": "Open documentation found in local 'html' folder in a separate web view panel"
			}
		],
		"languages": [
			{
				"id": "lean",
				"aliases": [
					"Lean",
					"lean"
				],
				"extensions": [
					".lean"
				]
			},
			{
				"id": "lean4",
				"configuration": "./language-configuration.json"
			},
			{
				"id": "leanmarkdown",
				"aliases": [],
				"extensions": [
					".leanmarkdown"
				],
				"configuration": "./language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "lean4",
				"scopeName": "source.lean4",
				"path": "./syntaxes/lean4.json"
			},
			{
				"language": "leanmarkdown",
				"scopeName": "source.lean.markdown",
				"path": "./syntaxes/lean-markdown.json"
			},
			{
				"scopeName": "markdown.lean4.codeblock",
				"path": "./syntaxes/codeblock.json",
				"injectTo": [
					"text.html.markdown"
				],
				"embeddedLanguages": {
					"meta.embedded.block.lean4": "lean4"
				}
			}
		],
		"keybindings": [
			{
				"command": "lean4.input.convert",
				"key": "tab",
				"mac": "tab",
				"when": "editorTextFocus && editorLangId == lean4 && lean4.input.isActive"
			},
			{
				"command": "lean4.refreshFileDependencies",
				"key": "ctrl+shift+x",
				"mac": "cmd+shift+x",
				"when": "editorTextFocus && editorLangId == lean4"
			},
			{
				"command": "lean4.displayGoal",
				"key": "ctrl+shift+enter",
				"mac": "cmd+shift+enter",
				"when": "editorTextFocus && editorLangId == lean4"
			},
			{
				"command": "lean4.displayList",
				"key": "ctrl+shift+alt+enter",
				"mac": "cmd+shift+alt+enter",
				"when": "editorTextFocus && editorLangId == lean4"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "lean4.input.convert",
					"when": "editorLangId == lean4 && lean4.input.isActive"
				},
				{
					"command": "lean4.refreshFileDependencies",
					"when": "editorLangId == lean4"
				},
				{
					"command": "lean4.displayGoal",
					"when": "editorLangId == lean4"
				},
				{
					"command": "lean4.infoView.copyToComment",
					"when": "editorLangId == lean4"
				},
				{
					"command": "lean4.infoView.toggleStickyPosition",
					"when": "editorLangId == lean4"
				},
				{
					"command": "lean4.restartServer",
					"when": "editorLangId == lean4"
				},
				{
					"command": "lean4.selectToolchain",
					"when": "editorLangId == lean4"
				},
				{
					"command": "lean4.docView.showAllAbbreviations",
					"when": "editorLangId == lean4"
				}
			],
			"editor/title": [
				{
					"command": "lean4.displayGoal",
					"when": "editorLangId == lean4",
					"group": "navigation@2"
				}
			]
		},
		"semanticTokenScopes": [
			{
				"scopes": {
					"keyword": [
						"keyword.other"
					]
				}
			}
		],
		"configurationDefaults": {
			"[lean4]": {
				"editor.unicodeHighlight.ambiguousCharacters": false,
				"editor.tabSize": 2,
				"editor.wordSeparators": "`~@$%^&*()-=+[{]}⟨⟩⦃⦄⟦⟧⟮⟯‹›\\|;:\",.<>/"
			}
		}
	},
	"extensionKind": [
		"workspace"
	],
	"activationEvents": [
		"onLanguage:lean",
		"onLanguage:lean4",
		"onLanguage:markdown",
		"onCommand:lean4.restartServer"
	],
	"main": "./dist/extension",
	"scripts": {
		"vscode:prepublish": "webpack --env production",
		"build": "webpack --env production",
		"watch": "webpack --env development --watch",
		"watchTest": "concurrently \"tsc -p . -w --outDir out\" \"npm run watch\"",
		"package": "vsce package",
		"pretest": "tsc -p . --outDir out",
		"test": "node ./out/test/suite/runTest.js"
	},
	"dependencies": {
		"@lean4/infoview-api": "^0.1.0",
		"@lean4/infoview": "^0.1.0",
		"axios": "^0.24.0",
		"cheerio": "^1.0.0-rc.10",
		"mobx": "5.15.7",
		"vscode-languageclient": "=7.0.0",
		"semver": "=7.3.5",
		"ps-node": "^0.1.6"
	},
	"devDependencies": {
		"@types/glob": "^7.1.3",
		"@types/mocha": "^8.2.0",
		"@types/node": "^17.0.7",
		"@types/vscode": "^1.57.0",
		"@types/cheerio": "^0.22.30",
		"@types/semver": "^5.3.30",
		"@types/vscode-webview": "^1.57.0",
		"@vscode/test-electron": "^2.1.2",
		"@types/ps-node": "^0.1.1",
		"concurrently": "^7.0.0",
		"glob": "^7.1.6",
		"mocha": "^8.2.1",
		"ovsx": "^0.2.1",
		"ts-loader": "^9.2.6",
		"typescript": "^4.5.4",
		"vsce": "~2.6.2",
		"webpack": "^5.65.0",
		"webpack-cli": "^4.9.1"
	},
	"icon": "images/lean_logo.png",
	"license": "Apache-2.0"
}
